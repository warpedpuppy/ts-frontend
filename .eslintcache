[{"/Users/edwardwalther/Sites/tryingsomething/frontend/src/index.js":"1","/Users/edwardwalther/Sites/tryingsomething/frontend/src/reportWebVitals.js":"2","/Users/edwardwalther/Sites/tryingsomething/frontend/src/App.js":"3","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/Home.js":"4","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/NotFound.js":"5","/Users/edwardwalther/Sites/tryingsomething/frontend/src/components/Menu.js":"6","/Users/edwardwalther/Sites/tryingsomething/frontend/src/services/TokenService.js":"7","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hsl/HSL.js":"8","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/CSS.js":"9","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/rgb/RGB.js":"10","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/Hexadecimal.js":"11","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/HexCreator.js":"12","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/HexPicker.js":"13","/Users/edwardwalther/Sites/tryingsomething/frontend/src/AppContext.js":"14","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/DBS.js":"15","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/Layout.js":"16","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/Color.js":"17","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/grid/Grid.js":"18","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/flex/Flex.js":"19","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/GraphQL.js":"20","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/DisplayChars.js":"21","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/js/JS.js":"22","/Users/edwardwalther/Sites/tryingsomething/frontend/src/config.js":"23","/Users/edwardwalther/Sites/tryingsomething/frontend/src/services/Utils.js":"24","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/services/mutations.js":"25","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/mongo/Mongo.js":"26","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/mongo/services/mongo-services.js":"27","/Users/edwardwalther/Sites/tryingsomething/frontend/src/components/SubMenu.js":"28","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/CRUD.js":"29","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/JoinPopulate.js":"30","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/components/CrudButtons.js":"31","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/postresql/PostgresQL.js":"32","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/components/CharacterModule.js":"33"},{"size":546,"mtime":1611581296697,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1607089328663,"results":"36","hashOfConfig":"35"},{"size":1673,"mtime":1613063905933,"results":"37","hashOfConfig":"35"},{"size":404,"mtime":1612885264955,"results":"38","hashOfConfig":"35"},{"size":160,"mtime":1613063928501,"results":"39","hashOfConfig":"35"},{"size":1252,"mtime":1612812674024,"results":"40","hashOfConfig":"35"},{"size":200,"mtime":1611581184878,"results":"41","hashOfConfig":"35"},{"size":2995,"mtime":1612799740006,"results":"42","hashOfConfig":"35"},{"size":650,"mtime":1612884134537,"results":"43","hashOfConfig":"35"},{"size":2887,"mtime":1612801148819,"results":"44","hashOfConfig":"35"},{"size":3358,"mtime":1612799821332,"results":"45","hashOfConfig":"35"},{"size":1245,"mtime":1612453553008,"results":"46","hashOfConfig":"35"},{"size":1007,"mtime":1612450572943,"results":"47","hashOfConfig":"35"},{"size":140,"mtime":1612449516966,"results":"48","hashOfConfig":"35"},{"size":883,"mtime":1613669277888,"results":"49","hashOfConfig":"35"},{"size":993,"mtime":1612884646564,"results":"50","hashOfConfig":"35"},{"size":1146,"mtime":1612884492703,"results":"51","hashOfConfig":"35"},{"size":152,"mtime":1612884699638,"results":"52","hashOfConfig":"35"},{"size":152,"mtime":1612884704004,"results":"53","hashOfConfig":"35"},{"size":6685,"mtime":1613678680236,"results":"54","hashOfConfig":"35"},{"size":0,"mtime":1613668707580,"results":"55","hashOfConfig":"35"},{"size":867,"mtime":1613480542502,"results":"56","hashOfConfig":"35"},{"size":81,"mtime":1613570920492,"results":"57","hashOfConfig":"35"},{"size":534,"mtime":1613653372200,"results":"58","hashOfConfig":"35"},{"size":3179,"mtime":1613678613346,"results":"59","hashOfConfig":"35"},{"size":2986,"mtime":1613663978415,"results":"60","hashOfConfig":"35"},{"size":1690,"mtime":1613663083284,"results":"61","hashOfConfig":"35"},{"size":850,"mtime":1613677638161,"results":"62","hashOfConfig":"35"},{"size":1256,"mtime":1613668572554,"results":"63","hashOfConfig":"35"},{"size":1096,"mtime":1613568017843,"results":"64","hashOfConfig":"35"},{"size":504,"mtime":1613658277719,"results":"65","hashOfConfig":"35"},{"size":3028,"mtime":1613661927014,"results":"66","hashOfConfig":"35"},{"size":973,"mtime":1613697917625,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1vrafp1",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/edwardwalther/Sites/tryingsomething/frontend/src/index.js",[],["139","140"],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/reportWebVitals.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/App.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/Home.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/NotFound.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/components/Menu.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/services/TokenService.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hsl/HSL.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/CSS.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/rgb/RGB.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/Hexadecimal.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/HexCreator.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/hexadecimal/HexPicker.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/AppContext.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/DBS.js",["141","142"],"import React, { Component } from 'react';\nimport '../../sitewide-css/page-layout-with-menu.css';\nimport Submenu from '../../components/SubMenu';\nimport CRUD from './CRUD';\nimport JoinPopulate from './JoinPopulate';\nimport Config from '../../config';\n\nimport Mutations from './graphql/services/mutations';\nexport default class DBS extends Component {\n  state = {\n    active: 'crud',\n    categories: ['crud', 'join/populate', 'performance']\n  }\n\n  onChange = (e) => {   \n   this.setState({active: e.target.innerHTML})\n  }\n  render() {\n    let active;\n    if (this.state.active === 'crud') {\n      active = <CRUD />\n    } else if (this.state.active === 'join/populate') {\n      active = <JoinPopulate />\n    }\n    return (\n      <>\n      <Submenu title={`dbs - ${this.state.active}`} menuItems={this.state.categories} onChange={this.onChange} />\n      { active }\n      </>\n    );\n  }\n}\n","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/Layout.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/color/Color.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/grid/Grid.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/css/layout/flex/Flex.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/GraphQL.js",["143","144","145"],"import React from 'react';\nimport Mutations from './services/mutations';\nimport './DisplayChars.css';\nimport * as PIXI from 'pixi.js'\nimport Utils from '../../../services/Utils';\nimport { v4 as uuidv4 } from 'uuid';\nimport CrudButtons from '../components/CrudButtons';\nimport './GraphQL.css';\nimport Config from '../../../config';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport CharacterModule from '../components/CharacterModule';\n\nexport default class GraphQL extends React.Component {\n    state = {activeCharacter: undefined, instructions: '', mode: undefined, characters: []};\n\n    constructor (){\n      super()\n        this.client = new ApolloClient({\n        uri: `${Config.API_URL}/graphql`,\n        cache: new InMemoryCache()\n      });\n      Mutations.setClient(this.client); console.log(this.client, `${Config.API_URL}/graphql`)\n    }\n\n    componentDidMount = () => {\n      Mutations.setUserID(uuidv4());\n      Mutations.deleteAllCharacters();\n    }\n    componentWillUnmount = async () => {\n        try {\n          await Mutations.deleteAllCharacters();\n        } catch(e) {\n          console.error(e)\n        } \n    }\n    create = async () => {\n      try {\n        let character = await Mutations.addChar(); \n        this.setState({characters: [...this.state.characters, character], instructions: ''})\n      } catch(e) {\n        console.error(e)\n      } \n    }\n    read = async () => {\n      let result = await Mutations.getChars();\n      if (!result.data.characters.length) {\n        this.setState({instructions: \"db is empty!\"})\n      } else {\n        this.setState({characters: result.data.characters, instructions: ''})\n      }\n      \n    }\n  \n    update = async (obj) => {\n      if (!this.state.characters.length) {\n        this.setState({instructions: \"db is empty!\"})\n      } else {\n        if (this.state.mode === 'update') {\n          this.setState({instructions: '', mode: ''})\n        } else {\n          this.setState({instructions: 'click on char to update', mode: 'update'})\n        }\n      }\n    }\n    updateHandler = async (e, id, character_name) => {\n      e.preventDefault();\n  \n      try {\n        let newColor = Utils.randomHex();\n        //remote\n        let result = await Mutations.updateChar(id, character_name, newColor);\n\n        //local\n        this.setState({characters: this.state.characters.map( character => {\n          return Object.assign(character, {character_color: character_name === character.character_name ? newColor : character.character_color})}), instructions: '', mode: ''\n        })\n      } catch (e) {\n          console.error(e)\n      }\n    }\n\n\n    delete = () => {\n      if (!this.state.characters.length) {\n        this.setState({instructions: \"db is empty!\"})\n      } else {\n        if (this.state.mode === 'delete') {\n          this.setState({instructions: '', mode: ''})\n        } else {\n          this.setState({instructions: 'click on char to delete', mode: 'delete'})\n        }\n      }\n    }\n\n    deleteHandler = async (id) => {\n      try {\n       let result = await Mutations.deleteChar(id); \n       console.log(result)\n       if (result) {\n        this.setState({characters: this.state.characters.filter(c => c.id !== id)})\n       }\n      } catch(e) {\n        console.error(e)\n      } \n    }\n   \n\n\n\n    chooseCharacter = (e) => {\n\n\n      if (this.state.activeCharacter) return;\n     \n\n      if (this.state.mode === 'delete') {\n        this.setState({activeCharacter: e.target})\n        //remote\n        this.deleteCharacter(this.state.activeCharacter.id);\n        //local\n        let char = this.characters.find( c => c === this.state.activeCharacter);\n        this.stage.removeChild(char);\n        this.characters.splice(this.characters.indexOf(char), 1)\n        this.setState({activeCharacter: undefined})\n        return;\n      }  else if (this.state.mode === 'update') {\n        this.setState({activeCharacter: e.target, instructions: ''})\n        let temp = this.state.activeCharacter;\n        temp.rotation = 0;\n        temp.scale.set(1);\n        temp.x = (this.canvasWidth / 2) - (temp.width / 2);\n        temp.y = this.canvasHeight / 2;\n      }\n    \n\n    }\n\n  \n    changeColorHandler = (e) => {\n      e.preventDefault();\n      this.setState({instructions: ''})\n      let newColor =  Utils.randomHex();\n       //change remote\n       let obj = {\n        character_name: this.state.activeCharacter.character_name,\n        character_color: newColor,\n        id: this.state.activeCharacter.id\n      };\n      this.updateCharacter(obj);\n\n       //change local\n       let temp = this.state.activeCharacter;\n       temp.tint =  `0x${newColor.substring(1)}`;\n       temp.scale.set(0.5);\n       this.setState({activeCharacter: undefined})\n\n    }\n\n    cancelEdit = (e) => {\n      if (e) e.preventDefault();\n      if (this.state.activeCharacter) {\n         this.state.activeCharacter.scale.set(0.5);\n          this.setState({activeCharacter: undefined, mode: ''})\n      }\n     \n    }\n    crudButtonsHandler = (e) => {\n      this.cancelEdit();\n      let text = e.target.innerHTML;\n      this.setState({instructions: '', mode: '', characters: []})\n      if (text === 'Create') {\n         this.addCharacter()\n      } else if (text === 'Update') {\n        this.setState({mode: 'update'})\n        if (this.characters.length) {\n          this.setState({instructions: \"click on one to update its name or color\"})\n        } else {\n          this.setState({instructions: \"there are none to update! click create first!\"})\n        }\n      } else if (text === 'Delete') {\n        this.setState({mode: 'delete'})\n        if (this.characters.length) {\n          this.setState({instructions: \"click on one to delete it\"})\n        } else {\n          this.setState({instructions: \"there are none to delete! click create first!\"})\n        }\n        \n      } else if (text === \"Read\") {\n        this.getCharacters();\n      }\n    }\n\n\n   render () {\n    const { activeCharacter, instructions } = this.state;\n    if (!this.client) return <div>loading. . . </div>\n    return (\n      <>\n      <ApolloProvider client={this.client}>\n          <CrudButtons create={this.create} read={this.read} update={this.update} delete={this.delete} />\n          <div className=\"instructions\">{ instructions }</div>\n          <div className=\"character-div\">\n            {\n              this.state.characters.map((item, index) => <CharacterModule \n              key={index} \n              mode={this.state.mode}\n              deleteHandler={this.deleteHandler} \n              changeColor={this.updateHandler} \n              {...item} /> )\n            }\n          </div>\n          </ApolloProvider>\n          </>\n        )\n    }\n}\n","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/DisplayChars.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/js/JS.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/config.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/services/Utils.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/graphql/services/mutations.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/mongo/Mongo.js",["146"],"import React, { Component } from 'react';\nimport CrudButtons from '../components/CrudButtons';\nimport Config from '../../../config';\nimport Faker from 'faker';\nimport { v4 as uuidv4 } from 'uuid';\nimport Utils from '../../../services/Utils';\nexport default class Mongo extends Component {\n  state = {characters: [], activeCharacter: undefined}\n\n  componentDidMount = () => {\n    this.uuid = uuidv4();\n  }\n  componentWillUnmount = async () => {\n    let response = await fetch(`${Config.API_URL}/mongo-restful/delete-all`, {\n      method: \"DELETE\", \n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({userid: this.uuid})\n    })\n    console.log('delete all response = ', response)\n  }\n  create = async (e) => {\n      e.preventDefault();\n      let obj = {\n          userid: this.uuid,\n          character_name: Faker.name.findName(),\n          character_color: Utils.randomHex()\n      }\n\n      let response = await fetch(`${Config.API_URL}/mongo-restful`, {\n          method: \"POST\", \n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(obj)\n      })\n      let responseJson = await response.json();\n  }\n  read = async (e) => {\n    e.preventDefault();\n    let response = await fetch(`${Config.API_URL}/mongo-restful/${this.uuid}`)\n    let responseJson = await response.json();\n    console.log(responseJson)\n   this.setState({characters: responseJson, activeCharacter: responseJson[0]})\n  }\n  update = async (e) => {\n    e.preventDefault();\n    if (!this.state.activeCharacter) return;\n    let obj = {\n      id: this.state.activeCharacter.id,\n      character_color: Utils.randomHex(),\n      character_name: this.state.activeCharacter.character_name\n    }\n    let response = await fetch(`${Config.API_URL}/mongo-restful`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    })\n    let responseJson = await response.json();\n    console.log(obj.id, responseJson)\n  }\n  delete = async (e) => {\n    e.preventDefault();\n    if (!this.state.activeCharacter) return;\n    let obj = {\n      id: this.state.activeCharacter.id\n    }\n    let response = await fetch(`${Config.API_URL}/mongo-restful`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    })\n    let responseJson = await response.json();\n    console.log(obj.id, responseJson)\n  }\n  \n  render() {\n    return (\n      <>\n      <CrudButtons create={this.create} read={this.read} update={this.update} delete={this.delete} />\n      <ul>\n        {\n          this.state.characters.map ( (item, index) => {\n            return (<li key={index}>\n              <ul>\n                <li>{item.id}</li>\n                <li>{item.character_color}</li>\n                <li>{item.character_name}</li>\n              </ul>\n            </li>)\n          })\n        }\n      </ul>\n      </>\n    );\n  }\n}\n","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/mongo/services/mongo-services.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/components/SubMenu.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/CRUD.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/JoinPopulate.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/components/CrudButtons.js",[],"/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/postresql/PostgresQL.js",["147"],"import React, { Component } from 'react';\nimport CrudButtons from '../components/CrudButtons';\nimport Config from '../../../config';\nimport Faker from 'faker';\nimport { v4 as uuidv4 } from 'uuid';\nimport Utils from '../../../services/Utils';\nexport default class PostgresQL extends Component {\n  state = {characters: [], activeCharacter: undefined}\n\n  componentDidMount = () => {\n    this.uuid = uuidv4();\n  }\n  componentWillUnmount = async () => {\n    let response = await fetch(`${Config.API_URL}/postgresql-restful/delete-all`, {\n      method: \"DELETE\", \n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({userid: this.uuid})\n    })\n    console.log('delete all response = ', response)\n  }\n  create = async (e) => {\n      e.preventDefault();\n      let obj = {\n          userid: this.uuid,\n          character_name: Faker.name.findName(),\n          character_color: Utils.randomHex()\n      }\n\n      let response = await fetch(`${Config.API_URL}/postgresql-restful`, {\n          method: \"POST\", \n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(obj)\n      })\n      let responseJson = await response.json();\n      console.log(responseJson)\n\n  }\n  read = async (e) => {\n    e.preventDefault();\n    let response = await fetch(`${Config.API_URL}/postgresql-restful/${this.uuid}`)\n    let responseJson = await response.json();\n    console.log(responseJson)\n  \n   this.setState({characters: responseJson.result, activeCharacter: responseJson.result[0]})\n  }\n  update = async (e) => {\n    e.preventDefault();\n    if (!this.state.activeCharacter) return;\n    let obj = {\n      id: this.state.activeCharacter.id,\n      character_color: Utils.randomHex(),\n      character_name: this.state.activeCharacter.character_name\n    }\n    let response = await fetch(`${Config.API_URL}/postgresql-restful`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    })\n    let responseJson = await response.json();\n  }\n  delete = async (e) => {\n    e.preventDefault();\n    if (!this.state.activeCharacter) return;\n    let obj = {\n      id: this.state.activeCharacter.id\n    }\n    let response = await fetch(`${Config.API_URL}/postgresql-restful`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    })\n    let responseJson = await response.json();\n    console.log(obj.id, responseJson)\n  }\n  \n  render() {\n    return (\n      <>\n      <CrudButtons create={this.create} read={this.read} update={this.update} delete={this.delete} />\n      <ul>\n        {\n          this.state.characters.map ( (item, index) => {\n            return (<li key={index}>\n              <ul>\n                <li>{item.id}</li>\n                <li>{item.character_color}</li>\n                <li>{item.character_name}</li>\n              </ul>\n            </li>)\n          })\n        }\n      </ul>\n      </>\n    );\n  }\n}\n","/Users/edwardwalther/Sites/tryingsomething/frontend/src/pages/dbs/components/CharacterModule.js",["148"],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":6,"column":8,"nodeType":"155","messageId":"156","endLine":6,"endColumn":14},{"ruleId":"153","severity":1,"message":"157","line":8,"column":8,"nodeType":"155","messageId":"156","endLine":8,"endColumn":17},{"ruleId":"153","severity":1,"message":"158","line":4,"column":13,"nodeType":"155","messageId":"156","endLine":4,"endColumn":17},{"ruleId":"153","severity":1,"message":"159","line":71,"column":13,"nodeType":"155","messageId":"156","endLine":71,"endColumn":19},{"ruleId":"153","severity":1,"message":"160","line":195,"column":13,"nodeType":"155","messageId":"156","endLine":195,"endColumn":28},{"ruleId":"153","severity":1,"message":"161","line":38,"column":11,"nodeType":"155","messageId":"156","endLine":38,"endColumn":23},{"ruleId":"153","severity":1,"message":"161","line":65,"column":9,"nodeType":"155","messageId":"156","endLine":65,"endColumn":21},{"ruleId":"153","severity":1,"message":"162","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":14},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'Config' is defined but never used.","Identifier","unusedVar","'Mutations' is defined but never used.","'PIXI' is defined but never used.","'result' is assigned a value but never used.","'activeCharacter' is assigned a value but never used.","'responseJson' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]